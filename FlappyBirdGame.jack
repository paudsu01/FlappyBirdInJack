class FlappyBirdGame{
	
	field Bird flappy_bird;
	field Obstacle obstacle_one;
	field Obstacle obstacle_two;
	field Obstacle obstacle_three;
	field boolean game_started;
	field boolean game_ended;
	field int score;
	field boolean all_three_obstacles_placed;
	
	constructor FlappyBirdGame new(){
		// Init 
		let flappy_bird = Bird.new();
		let obstacle_one = Obstacle.new(270, 60);
		let obstacle_two = Obstacle.new(441, 20);
		let obstacle_three = Obstacle.new(441, 100);
		let game_ended = false;
		let score = 0;
		let all_three_obstacles_placed = false;

		return this;
	}

	method void run(){

		var char key;

		while (~game_ended) {
			
			let key = Keyboard.keyPressed();	
			if (key = 32) {

				let game_started=true;
				do flappy_bird.set_speed(10);
				do flappy_bird.going_up();

				}

			if (game_started){
				do flappy_bird.move();	
				do obstacle_one.move();	
				do obstacle_two.move();	
				if (all_three_obstacles_placed){
					do obstacle_three.move();	
					}
			}
			
		
			do update_obstacles();

			do flappy_bird.draw();	
			do obstacle_one.draw();	
			do obstacle_two.draw();	
			if (all_three_obstacles_placed){
				do obstacle_three.draw();	
			}
			

			// check if game over
			do check_if_game_over();
			// Update score
			do update_score();
			do show_score();

			// draw straight line at row 235
			do Screen.drawLine(0, 234, 511, 234);
			do Sys.wait(35);
			do Screen.clearScreen();

		}

		do obstacle_one.dispose();
		do obstacle_two.dispose();
		do obstacle_three.dispose();
		do flappy_bird.dispose();

		return;
	}

	method void show_score(){
		do Output.moveCursor(22,50);	
		do Output.printString("SCORE : ");	
		do Output.printInt(score);	
		return;
	}

	method void update_score_each_obstacle(Obstacle obs){

		if (flappy_bird.get_column() > (obs.get_column() + obs.get_width())){
			if (~obs.is_obstacle_passed()){
				let score = score + 1;
				do obs.set_obstacle_passed();
			}
		}
		return;	
	}

	method void update_score(){
		do update_score_each_obstacle(obstacle_one);
		do update_score_each_obstacle(obstacle_two);
		do update_score_each_obstacle(obstacle_three);
		return;
	}

	method void check_for_boundaries(Obstacle obs){

		if ((flappy_bird.get_column() + 48) > obs.get_column()){
			if (flappy_bird.get_column() < (obs.get_column() + obs.get_width())){
				let game_ended = true;
			}
		}
		return;
	}

	method void check_for_obstacle(Obstacle obs){

		if (flappy_bird.get_row() < obs.get_opening_row()){
			do check_for_boundaries(obs);
		}

		if ((flappy_bird.get_row() + 32) > (obs.get_opening_row()+obs.get_gap())){
			do check_for_boundaries(obs);
		}
		return;
	}

	method void check_if_game_over(){

		if ((flappy_bird.get_row() + 32) = 234){

			let game_ended = true;
		}
		do check_for_obstacle(obstacle_one);
		do check_for_obstacle(obstacle_two);
		do check_for_obstacle(obstacle_three);
		return;
	}

	method void create_new_obstacle(Obstacle obs, int starting_row){
		if (obs.get_column() < 0) {
			do obs.dispose();
			let obs = Obstacle.new(441,starting_row);
		}
	return;
	}

	method void update_obstacles(){
		
		// dealloc obstacle and create new one if column value 0
		do create_new_obstacle(obstacle_one, 50);
		do create_new_obstacle(obstacle_two, 20);
		do create_new_obstacle(obstacle_three, 90);
 		// to place the third_obstacle
               	if (obstacle_one.get_column()  < 120) {
                       let all_three_obstacles_placed = true;
               }
		return;
	}
	
	method void dispose(){
		do Memory.deAlloc(this);
		return;
	}

}
